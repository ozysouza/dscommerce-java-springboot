# Generate script if needed
# spring.jpa.properties.jakarta.persistence.schema-generation.create-source=metadata
# spring.jpa.properties.jakarta.persistence.schema-generation.scripts.action=create
# spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-target=create.sql
# spring.jpa.properties.hibernate.hbm2ddl.delimiter=;

# PostgreSQL database configuration and JPA setting
# spring.datasource.url=jdbc:postgresql://localhost:5432/dscommerce
# spring.datasource.username=postgres
# spring.datasource.password=123456

# spring.jpa.hibernate.ddl-auto=create-drop
# spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.format_sql=true
# spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect



# MySQL database configuration and JPA settings
# spring.datasource.url=jdbc:mysql://localhost:3306/${database}?useSSL=false&serverTimezone=UTC
# spring.datasource.username=${username}
# spring.datasource.password=${password}
# spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# spring.jpa.hibernate.ddl-auto=none
# spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.format_sql=true
# spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect


# none	Does nothing (you manage schema yourself)
# validate	Validates the schema, throws error if mismatches exist (safe for prod)
# update	Automatically updates the schema to match entities (not recommended for production)
# create	Drops and recreates all tables on each startup
# create-drop	Same as create, but also drops everything when the app shuts down
